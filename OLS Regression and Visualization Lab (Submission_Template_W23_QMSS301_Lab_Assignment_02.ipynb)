{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Submission Details: This homework problem set consists of 2 problems. Use the PDF as a reference for the questions. All solutions (in Python Notebook, **LastName_FirstName_Assignment2.ipynb**) should be submitted via CANVAS before the deadline (**10 Feb 2023 at 01:00 PM**).\n",
        "\n",
        "*Best Coding Practices:*\n",
        "\n",
        "\n",
        "*   Having Proper Comments and Documentation\n",
        "*   Proper Naming of Variables, Classes, Functions and Modules\n"
      ],
      "metadata": {
        "id": "Sr8PMvut_S1b"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Question 1 (Data setup & Regression - 14 points):\n",
        "\n",
        "Use the “california housing train” dataset (located in the sample data folder on Colab) to complete the following tasks or answer the following\n",
        "questions."
      ],
      "metadata": {
        "id": "mCDs8oSa-RFP"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I56ySo7AGvpa"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Vb7tqJaRRwuO"
      },
      "outputs": [],
      "source": [
        "# Importing the necessary Python Packages\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from statsmodels.formula.api import ols"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "_v4S4nzjekBO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "outputId": "baebc4b7-b395-41a2-c8f8-ffb26dd8e8a5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n",
              "0    -114.31     34.19                15.0       5612.0          1283.0   \n",
              "1    -114.47     34.40                19.0       7650.0          1901.0   \n",
              "2    -114.56     33.69                17.0        720.0           174.0   \n",
              "3    -114.57     33.64                14.0       1501.0           337.0   \n",
              "4    -114.57     33.57                20.0       1454.0           326.0   \n",
              "\n",
              "   population  households  median_income  median_house_value  \n",
              "0      1015.0       472.0         1.4936             66900.0  \n",
              "1      1129.0       463.0         1.8200             80100.0  \n",
              "2       333.0       117.0         1.6509             85700.0  \n",
              "3       515.0       226.0         3.1917             73400.0  \n",
              "4       624.0       262.0         1.9250             65500.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e52ddd9d-460c-4f2e-bc26-f45e3bc78eb2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>median_house_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-114.31</td>\n",
              "      <td>34.19</td>\n",
              "      <td>15.0</td>\n",
              "      <td>5612.0</td>\n",
              "      <td>1283.0</td>\n",
              "      <td>1015.0</td>\n",
              "      <td>472.0</td>\n",
              "      <td>1.4936</td>\n",
              "      <td>66900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-114.47</td>\n",
              "      <td>34.40</td>\n",
              "      <td>19.0</td>\n",
              "      <td>7650.0</td>\n",
              "      <td>1901.0</td>\n",
              "      <td>1129.0</td>\n",
              "      <td>463.0</td>\n",
              "      <td>1.8200</td>\n",
              "      <td>80100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-114.56</td>\n",
              "      <td>33.69</td>\n",
              "      <td>17.0</td>\n",
              "      <td>720.0</td>\n",
              "      <td>174.0</td>\n",
              "      <td>333.0</td>\n",
              "      <td>117.0</td>\n",
              "      <td>1.6509</td>\n",
              "      <td>85700.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-114.57</td>\n",
              "      <td>33.64</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1501.0</td>\n",
              "      <td>337.0</td>\n",
              "      <td>515.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>3.1917</td>\n",
              "      <td>73400.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-114.57</td>\n",
              "      <td>33.57</td>\n",
              "      <td>20.0</td>\n",
              "      <td>1454.0</td>\n",
              "      <td>326.0</td>\n",
              "      <td>624.0</td>\n",
              "      <td>262.0</td>\n",
              "      <td>1.9250</td>\n",
              "      <td>65500.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e52ddd9d-460c-4f2e-bc26-f45e3bc78eb2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e52ddd9d-460c-4f2e-bc26-f45e3bc78eb2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e52ddd9d-460c-4f2e-bc26-f45e3bc78eb2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "# Importing the dataset (csv file)\n",
        "california_housing_train = pd.read_csv('california_housing_train.csv')\n",
        "california_housing_train.head()   # List the first 5 rows of tabular data"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Describe the dataset. What is the sample size? How many variables are there? What is the mean of the households variable? What is the standard deviation of the variable population? What does the standard deviation mean in this case? (5 points)"
      ],
      "metadata": {
        "id": "LHJEOC9U-f16"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "BXvboLrgirWp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 642
        },
        "outputId": "98a16971-cc79-4c10-9729-cd2f5886a66a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 17000 entries, 0 to 16999\n",
            "Data columns (total 9 columns):\n",
            " #   Column              Non-Null Count  Dtype  \n",
            "---  ------              --------------  -----  \n",
            " 0   longitude           17000 non-null  float64\n",
            " 1   latitude            17000 non-null  float64\n",
            " 2   housing_median_age  17000 non-null  float64\n",
            " 3   total_rooms         17000 non-null  float64\n",
            " 4   total_bedrooms      17000 non-null  float64\n",
            " 5   population          17000 non-null  float64\n",
            " 6   households          17000 non-null  float64\n",
            " 7   median_income       17000 non-null  float64\n",
            " 8   median_house_value  17000 non-null  float64\n",
            "dtypes: float64(9)\n",
            "memory usage: 1.2 MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          longitude      latitude  housing_median_age   total_rooms  \\\n",
              "count  17000.000000  17000.000000        17000.000000  17000.000000   \n",
              "mean    -119.562108     35.625225           28.589353   2643.664412   \n",
              "std        2.005166      2.137340           12.586937   2179.947071   \n",
              "min     -124.350000     32.540000            1.000000      2.000000   \n",
              "25%     -121.790000     33.930000           18.000000   1462.000000   \n",
              "50%     -118.490000     34.250000           29.000000   2127.000000   \n",
              "75%     -118.000000     37.720000           37.000000   3151.250000   \n",
              "max     -114.310000     41.950000           52.000000  37937.000000   \n",
              "\n",
              "       total_bedrooms    population    households  median_income  \\\n",
              "count    17000.000000  17000.000000  17000.000000   17000.000000   \n",
              "mean       539.410824   1429.573941    501.221941       3.883578   \n",
              "std        421.499452   1147.852959    384.520841       1.908157   \n",
              "min          1.000000      3.000000      1.000000       0.499900   \n",
              "25%        297.000000    790.000000    282.000000       2.566375   \n",
              "50%        434.000000   1167.000000    409.000000       3.544600   \n",
              "75%        648.250000   1721.000000    605.250000       4.767000   \n",
              "max       6445.000000  35682.000000   6082.000000      15.000100   \n",
              "\n",
              "       median_house_value  \n",
              "count        17000.000000  \n",
              "mean        207300.912353  \n",
              "std         115983.764387  \n",
              "min          14999.000000  \n",
              "25%         119400.000000  \n",
              "50%         180400.000000  \n",
              "75%         265000.000000  \n",
              "max         500001.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-557781e4-edd6-4d16-8832-9642e9c87dcc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>median_house_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>17000.000000</td>\n",
              "      <td>17000.000000</td>\n",
              "      <td>17000.000000</td>\n",
              "      <td>17000.000000</td>\n",
              "      <td>17000.000000</td>\n",
              "      <td>17000.000000</td>\n",
              "      <td>17000.000000</td>\n",
              "      <td>17000.000000</td>\n",
              "      <td>17000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-119.562108</td>\n",
              "      <td>35.625225</td>\n",
              "      <td>28.589353</td>\n",
              "      <td>2643.664412</td>\n",
              "      <td>539.410824</td>\n",
              "      <td>1429.573941</td>\n",
              "      <td>501.221941</td>\n",
              "      <td>3.883578</td>\n",
              "      <td>207300.912353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.005166</td>\n",
              "      <td>2.137340</td>\n",
              "      <td>12.586937</td>\n",
              "      <td>2179.947071</td>\n",
              "      <td>421.499452</td>\n",
              "      <td>1147.852959</td>\n",
              "      <td>384.520841</td>\n",
              "      <td>1.908157</td>\n",
              "      <td>115983.764387</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-124.350000</td>\n",
              "      <td>32.540000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.499900</td>\n",
              "      <td>14999.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-121.790000</td>\n",
              "      <td>33.930000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>1462.000000</td>\n",
              "      <td>297.000000</td>\n",
              "      <td>790.000000</td>\n",
              "      <td>282.000000</td>\n",
              "      <td>2.566375</td>\n",
              "      <td>119400.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>-118.490000</td>\n",
              "      <td>34.250000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>2127.000000</td>\n",
              "      <td>434.000000</td>\n",
              "      <td>1167.000000</td>\n",
              "      <td>409.000000</td>\n",
              "      <td>3.544600</td>\n",
              "      <td>180400.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>-118.000000</td>\n",
              "      <td>37.720000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>3151.250000</td>\n",
              "      <td>648.250000</td>\n",
              "      <td>1721.000000</td>\n",
              "      <td>605.250000</td>\n",
              "      <td>4.767000</td>\n",
              "      <td>265000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>-114.310000</td>\n",
              "      <td>41.950000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>37937.000000</td>\n",
              "      <td>6445.000000</td>\n",
              "      <td>35682.000000</td>\n",
              "      <td>6082.000000</td>\n",
              "      <td>15.000100</td>\n",
              "      <td>500001.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-557781e4-edd6-4d16-8832-9642e9c87dcc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-557781e4-edd6-4d16-8832-9642e9c87dcc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-557781e4-edd6-4d16-8832-9642e9c87dcc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "california_housing_train.info()\n",
        "california_housing_train.describe()\n",
        "\n",
        "#sample size: The sample size is 17,000 units\n",
        "#number of variables: There are 9 variables (total 9 data columns)\n",
        "#mean households: 501.22 \n",
        "#SD + explanation: The standard deviation of 1147.85 means that the values in the population variable can vary widely from the mean; on average, they are spread about 1147.85 units away from the mean. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9qrz9pAOIaja"
      },
      "source": [
        "Create a binary variable in integer form from the variable median house value with 1 indicating above the median and 0 indicating at or below the median. (1 point)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "Ibs4Smi8IaOb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a2bf5141-0258-418c-d337-4a1d410d388e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Median: 180400.0\n",
            "   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n",
            "0    -114.31     34.19                15.0       5612.0          1283.0   \n",
            "1    -114.47     34.40                19.0       7650.0          1901.0   \n",
            "2    -114.56     33.69                17.0        720.0           174.0   \n",
            "3    -114.57     33.64                14.0       1501.0           337.0   \n",
            "4    -114.57     33.57                20.0       1454.0           326.0   \n",
            "\n",
            "   population  households  median_income  median_house_value  \\\n",
            "0      1015.0       472.0         1.4936             66900.0   \n",
            "1      1129.0       463.0         1.8200             80100.0   \n",
            "2       333.0       117.0         1.6509             85700.0   \n",
            "3       515.0       226.0         3.1917             73400.0   \n",
            "4       624.0       262.0         1.9250             65500.0   \n",
            "\n",
            "   binary_median_house_value  \n",
            "0                          0  \n",
            "1                          0  \n",
            "2                          0  \n",
            "3                          0  \n",
            "4                          0  \n"
          ]
        }
      ],
      "source": [
        "#find the median of a column\n",
        "median = california_housing_train[\"median_house_value\"].median()\n",
        "\n",
        "#print the median\n",
        "print(median)\n",
        "\n",
        "#select column\n",
        "column = california_housing_train[\"median_house_value\"]\n",
        "\n",
        "#create new binary column based on a condition\n",
        "california_housing_train[\"binary_median_house_value\"] = [1 if x > 180400.0 else 0 for x in column]\n",
        "\n",
        "#see the new variable column\n",
        "print(california_housing_train.head())\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b5tw96W6JkT_"
      },
      "source": [
        "What percent of the sample has above the median house values? (1 point)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "nviy9D9Wkuom",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed3a47e9-9f3a-49c7-d30d-55f7f9d50472"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "49.95294117647059\n"
          ]
        }
      ],
      "source": [
        "#create a new column that says whether each value is above the median\n",
        "california_housing_train[\"above_median_house_value\"] = [1 if x > 180400.0 else 0 for x in california_housing_train[\"median_house_value\"]]\n",
        "\n",
        "# % values that are above the median\n",
        "percent_above_median_house_value = california_housing_train[\"above_median_house_value\"].mean() * 100\n",
        "\n",
        "#print results\n",
        "print(percent_above_median_house_value)\n",
        "\n",
        "#percent above median: 49.95% "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p278OtvmJxdA"
      },
      "source": [
        "Build a multiple linear regression model. Choose appropriate dependent and independent variables. (3 points)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "FB_GpBUHJ1Uy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "864600a4-93ba-4b12-cda9-688711cca151"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:            total_rooms   R-squared:                       0.038\n",
            "Model:                            OLS   Adj. R-squared:                  0.038\n",
            "Method:                 Least Squares   F-statistic:                     337.6\n",
            "Date:                Thu, 09 Feb 2023   Prob (F-statistic):          1.64e-144\n",
            "Time:                        17:02:48   Log-Likelihood:            -1.5447e+05\n",
            "No. Observations:               17000   AIC:                         3.089e+05\n",
            "Df Residuals:                   16997   BIC:                         3.090e+05\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "======================================================================================\n",
            "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
            "--------------------------------------------------------------------------------------\n",
            "Intercept           1783.4426     38.170     46.724      0.000    1708.626    1858.259\n",
            "median_income        229.5625     11.902     19.287      0.000     206.232     252.892\n",
            "median_house_value    -0.0002      0.000     -0.771      0.441      -0.001       0.000\n",
            "==============================================================================\n",
            "Omnibus:                    14710.060   Durbin-Watson:                   1.670\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           676241.364\n",
            "Skew:                           3.978   Prob(JB):                         0.00\n",
            "Kurtosis:                      32.856   Cond. No.                     5.59e+05\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 5.59e+05. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ],
      "source": [
        "#MLG model with total_rooms (D) variable and median_income, median_house_value (I) variables\n",
        "house_value_multi_reg = ols('total_rooms ~ median_income + median_house_value', data = california_housing_train).fit()\n",
        "print(house_value_multi_reg.summary())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xeVJZQK7J4_P"
      },
      "source": [
        "Explain the coding implementation. Interpret the coefficients in descriptive sentences. (2 points)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lAjdFtJlKYNJ"
      },
      "outputs": [],
      "source": [
        "#I decided to analyze the effects of median household income and median house value on the number of rooms a unit has, as these economic factors may contribute to families' standard of living. \n",
        "#The model measures the amount by which the number of rooms changes on average when one of the independent variables changes by one unit and the other remains constant.\n",
        "#The coefficient for median income is 229.56. This means that each unit increase in median income is associated with an increase of 229.5 rooms on average.\n",
        "#The p-value for median income is less than 0.05 (0.00), so we can conclude that median income is statistically significant in explaining variation in total rooms. \n",
        "#The coefficient for median house value is -0.0002. This means that each unit increase in median house value is associated with a decrease of 0.0002 rooms on average.\n",
        "#The p-value for median huse value is far greater than 0.05 (0.441), so we can conclude that median house value is not statistically significant in explaining variation in total rooms. "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explain two additional things about the output that are not regression coefficients. (2 points)"
      ],
      "metadata": {
        "id": "qxEHd8xl-6u_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#The F-statistic value is high (337.6), which tells us that median income and median house value in the model are overall collectively significant in explaining variation in total rooms.\n",
        "#The R-squared value measures the proportion of variance in total rooms that is actually explained by the independent variables; in this case, it is close to zero (0.038), meaning the model as a whole is not a tight fit to the data and may not be the best at explaining variation in total rooms."
      ],
      "metadata": {
        "id": "PJ4zTt0P-8IP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Question 2 (Matplotlib - 6 points): "
      ],
      "metadata": {
        "id": "-rzzwTyn-Ht8"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wkdJybaUJ-DA"
      },
      "source": [
        "Using the Maternal Health Risk Dataset (provided in the lecture resources folder), create the following data visualizations. You will likely need to consult the documentation for matplotlib."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "C5PXwZq9KClB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "161c8266-7585-4d1e-b0b4-6f952dfbb2bf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age  SystolicBP  DiastolicBP    BS  BodyTemp  HeartRate  RiskLevel\n",
              "0   25         130           80  15.0      98.0         86  high risk\n",
              "1   35         140           90  13.0      98.0         70  high risk\n",
              "2   29          90           70   8.0     100.0         80  high risk\n",
              "3   30         140           85   7.0      98.0         70  high risk\n",
              "4   35         120           60   6.1      98.0         76   low risk"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-770f71e4-a456-41ed-8455-4c901c68eb67\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>SystolicBP</th>\n",
              "      <th>DiastolicBP</th>\n",
              "      <th>BS</th>\n",
              "      <th>BodyTemp</th>\n",
              "      <th>HeartRate</th>\n",
              "      <th>RiskLevel</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>25</td>\n",
              "      <td>130</td>\n",
              "      <td>80</td>\n",
              "      <td>15.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>86</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>35</td>\n",
              "      <td>140</td>\n",
              "      <td>90</td>\n",
              "      <td>13.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>70</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>29</td>\n",
              "      <td>90</td>\n",
              "      <td>70</td>\n",
              "      <td>8.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>80</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30</td>\n",
              "      <td>140</td>\n",
              "      <td>85</td>\n",
              "      <td>7.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>70</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>35</td>\n",
              "      <td>120</td>\n",
              "      <td>60</td>\n",
              "      <td>6.1</td>\n",
              "      <td>98.0</td>\n",
              "      <td>76</td>\n",
              "      <td>low risk</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-770f71e4-a456-41ed-8455-4c901c68eb67')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-770f71e4-a456-41ed-8455-4c901c68eb67 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-770f71e4-a456-41ed-8455-4c901c68eb67');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "# Importing the necessary Python Packages\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Importing the dataset (csv file)\n",
        "maternal_health_data = pd.read_csv('Maternal Health Risk Dataset.csv')\n",
        "maternal_health_data.head()   # List the first 5 rows of tabular data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kJvKfIKLKVnO"
      },
      "source": [
        "Make a histogram of age with 25 bins of age, change the color of the histogram bars to grey, and title the histogram. (2 points)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "KHYZWDamfaTT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "outputId": "dc8be51c-7503-4f68-9640-f56be8885dd3"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#plot using hist() function\n",
        "plt.hist(maternal_health_data['Age'], bins=25, color='grey')\n",
        "\n",
        "#title \n",
        "plt.title(\"Age Distribution\")\n",
        "\n",
        "#display\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uXUCL7TlMFJ0"
      },
      "source": [
        "Make a simple scatterplot of age and systolicBP. Ensure that the x and y variables are on the correct axes. Change the color of the points to yellow and the shape of the points to triangles. (2 points)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "sViHVl8Je8Yt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "eafd308f-2136-449a-aa8d-19e92ebbcafd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#scatterplot using scatter() function w/ design changes\n",
        "plt.scatter(maternal_health_data['Age'], maternal_health_data['SystolicBP'], color='yellow', marker='^')\n",
        "\n",
        "#x and y labels \n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Systolic Blood Pressure\")\n",
        "\n",
        "#title \n",
        "plt.title(\"Scatterplot of Age vs Systolic Blood Pressure\")\n",
        "\n",
        "#display\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Make a bar chart of two variables. Label the axes. Change the color of the bars to another color. (2 points)"
      ],
      "metadata": {
        "id": "HZ5OL16l9udM"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "zNRx6hS5VHcn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "7b1efe0d-c29b-47f0-a374-05bc221d0244"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#make bar chart w/ color\n",
        "plt.bar(maternal_health_data['Age'], maternal_health_data['HeartRate'], color='purple')\n",
        "\n",
        "#x and y labels\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Heart Rate\")\n",
        "\n",
        "# title\n",
        "plt.title(\"Bar Chart of Heart Rate vs Age\")\n",
        "\n",
        "# print\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
