{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**1. Import Libraries** "
      ],
      "metadata": {
        "id": "BuVsfqu_xrAY"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 172,
      "metadata": {
        "id": "LMyz1Ico3Qdv"
      },
      "outputs": [],
      "source": [
        "#importing the necessary Python libraries \n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from statsmodels.formula.api import logit\n",
        "import statsmodels.formula.api as smf\n",
        "import statsmodels.api as sm\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn import metrics\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Import Data and Explore**"
      ],
      "metadata": {
        "id": "jrIu9l3Kxzr4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#importing the CSV file as \"dropout_data\"\n",
        "dropout_data = pd.read_csv('dropout_data.csv')\n",
        "\n",
        "#explore: list the first 5 rows of data\n",
        "dropout_data.head()\n",
        "\n",
        "#explore: list the last 5 rows of data\n",
        "dropout_data.tail()   "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "rK1GfKq9Cx01",
        "outputId": "f2259c46-5d61-457b-816d-d63c88d109a7"
      },
      "execution_count": 173,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  moqual  faqual  admingrade  eduspecneeds  prevgrade  \\\n",
              "3625        4419       1       1       122.2             0      125.0   \n",
              "3626        4420       1       1       119.0             0      120.0   \n",
              "3627        4421      37      37       149.5             0      154.0   \n",
              "3628        4422      37      37       153.8             0      180.0   \n",
              "3629        4423      38      37       152.0             0      152.0   \n",
              "\n",
              "      ownschshp  prevqual  displaced  debtor  paidfeetodate  gender  \\\n",
              "3625          0         1          0       0              1       1   \n",
              "3626          0         1          1       1              0       0   \n",
              "3627          1         1          1       0              1       0   \n",
              "3628          1         1          1       0              1       0   \n",
              "3629          0         1          1       0              1       0   \n",
              "\n",
              "      secsemgrade  target  course  \n",
              "3625    12.666667       1    9773  \n",
              "3626    11.000000       0    9773  \n",
              "3627    13.500000       0    9500  \n",
              "3628    12.000000       1    9147  \n",
              "3629    13.000000       1    9773  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-47cde149-8f70-45b0-af33-3db81cef054e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>moqual</th>\n",
              "      <th>faqual</th>\n",
              "      <th>admingrade</th>\n",
              "      <th>eduspecneeds</th>\n",
              "      <th>prevgrade</th>\n",
              "      <th>ownschshp</th>\n",
              "      <th>prevqual</th>\n",
              "      <th>displaced</th>\n",
              "      <th>debtor</th>\n",
              "      <th>paidfeetodate</th>\n",
              "      <th>gender</th>\n",
              "      <th>secsemgrade</th>\n",
              "      <th>target</th>\n",
              "      <th>course</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3625</th>\n",
              "      <td>4419</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>122.2</td>\n",
              "      <td>0</td>\n",
              "      <td>125.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>12.666667</td>\n",
              "      <td>1</td>\n",
              "      <td>9773</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3626</th>\n",
              "      <td>4420</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>119.0</td>\n",
              "      <td>0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>9773</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3627</th>\n",
              "      <td>4421</td>\n",
              "      <td>37</td>\n",
              "      <td>37</td>\n",
              "      <td>149.5</td>\n",
              "      <td>0</td>\n",
              "      <td>154.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>9500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3628</th>\n",
              "      <td>4422</td>\n",
              "      <td>37</td>\n",
              "      <td>37</td>\n",
              "      <td>153.8</td>\n",
              "      <td>0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>9147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3629</th>\n",
              "      <td>4423</td>\n",
              "      <td>38</td>\n",
              "      <td>37</td>\n",
              "      <td>152.0</td>\n",
              "      <td>0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>9773</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-47cde149-8f70-45b0-af33-3db81cef054e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-47cde149-8f70-45b0-af33-3db81cef054e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-47cde149-8f70-45b0-af33-3db81cef054e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 173
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#explore: taking a look at descriptive statistics \n",
        "dropout_data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "gL9VkywErzT4",
        "outputId": "a14f6088-9aa2-4130-e59d-7e550a1df927"
      },
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Unnamed: 0       moqual       faqual   admingrade  eduspecneeds  \\\n",
              "count  3630.000000  3630.000000  3630.000000  3630.000000   3630.000000   \n",
              "mean   2208.157576    19.986226    22.571625   127.293939      0.011019   \n",
              "std    1280.169101    15.585278    15.275453    14.611295      0.104407   \n",
              "min       0.000000     1.000000     1.000000    95.000000      0.000000   \n",
              "25%    1090.250000     2.000000     3.000000   118.000000      0.000000   \n",
              "50%    2191.500000    19.000000    19.000000   126.500000      0.000000   \n",
              "75%    3315.750000    37.000000    37.000000   135.100000      0.000000   \n",
              "max    4423.000000    44.000000    44.000000   190.000000      1.000000   \n",
              "\n",
              "         prevgrade    ownschshp     prevqual    displaced       debtor  \\\n",
              "count  3630.000000  3630.000000  3630.000000  3630.000000  3630.000000   \n",
              "mean    132.920606     0.266942     4.532231     0.549036     0.113774   \n",
              "std      13.238373     0.442423    10.024134     0.497658     0.317580   \n",
              "min      95.000000     0.000000     1.000000     0.000000     0.000000   \n",
              "25%     125.000000     0.000000     1.000000     0.000000     0.000000   \n",
              "50%     133.100000     0.000000     1.000000     1.000000     0.000000   \n",
              "75%     140.000000     1.000000     1.000000     1.000000     0.000000   \n",
              "max     190.000000     1.000000    43.000000     1.000000     1.000000   \n",
              "\n",
              "       paidfeetodate       gender  secsemgrade       target       course  \n",
              "count    3630.000000  3630.000000  3630.000000  3630.000000  3630.000000  \n",
              "mean        0.866116     0.344077    10.036155     0.608540  8853.980992  \n",
              "std         0.340575     0.475132     5.481742     0.488144  2068.760082  \n",
              "min         0.000000     0.000000     0.000000     0.000000    33.000000  \n",
              "25%         1.000000     0.000000    10.517857     0.000000  9085.000000  \n",
              "50%         1.000000     0.000000    12.333333     1.000000  9254.000000  \n",
              "75%         1.000000     1.000000    13.500000     1.000000  9556.000000  \n",
              "max         1.000000     1.000000    18.571429     1.000000  9991.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ecedcf12-60f0-4046-bf56-d2a27354b871\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>moqual</th>\n",
              "      <th>faqual</th>\n",
              "      <th>admingrade</th>\n",
              "      <th>eduspecneeds</th>\n",
              "      <th>prevgrade</th>\n",
              "      <th>ownschshp</th>\n",
              "      <th>prevqual</th>\n",
              "      <th>displaced</th>\n",
              "      <th>debtor</th>\n",
              "      <th>paidfeetodate</th>\n",
              "      <th>gender</th>\n",
              "      <th>secsemgrade</th>\n",
              "      <th>target</th>\n",
              "      <th>course</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "      <td>3630.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2208.157576</td>\n",
              "      <td>19.986226</td>\n",
              "      <td>22.571625</td>\n",
              "      <td>127.293939</td>\n",
              "      <td>0.011019</td>\n",
              "      <td>132.920606</td>\n",
              "      <td>0.266942</td>\n",
              "      <td>4.532231</td>\n",
              "      <td>0.549036</td>\n",
              "      <td>0.113774</td>\n",
              "      <td>0.866116</td>\n",
              "      <td>0.344077</td>\n",
              "      <td>10.036155</td>\n",
              "      <td>0.608540</td>\n",
              "      <td>8853.980992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1280.169101</td>\n",
              "      <td>15.585278</td>\n",
              "      <td>15.275453</td>\n",
              "      <td>14.611295</td>\n",
              "      <td>0.104407</td>\n",
              "      <td>13.238373</td>\n",
              "      <td>0.442423</td>\n",
              "      <td>10.024134</td>\n",
              "      <td>0.497658</td>\n",
              "      <td>0.317580</td>\n",
              "      <td>0.340575</td>\n",
              "      <td>0.475132</td>\n",
              "      <td>5.481742</td>\n",
              "      <td>0.488144</td>\n",
              "      <td>2068.760082</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>33.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1090.250000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>118.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>125.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>10.517857</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9085.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2191.500000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>126.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>133.100000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>12.333333</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>9254.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3315.750000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>135.100000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>13.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>9556.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>4423.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>190.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>190.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>43.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>18.571429</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>9991.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ecedcf12-60f0-4046-bf56-d2a27354b871')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ecedcf12-60f0-4046-bf56-d2a27354b871 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ecedcf12-60f0-4046-bf56-d2a27354b871');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 174
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#explore: taking a look at the dataframe toplines\n",
        "dropout_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ntQeYI3aikQF",
        "outputId": "0da94de0-565d-4f6e-f332-4f8691dbd747"
      },
      "execution_count": 175,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3630 entries, 0 to 3629\n",
            "Data columns (total 15 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   Unnamed: 0     3630 non-null   int64  \n",
            " 1   moqual         3630 non-null   int64  \n",
            " 2   faqual         3630 non-null   int64  \n",
            " 3   admingrade     3630 non-null   float64\n",
            " 4   eduspecneeds   3630 non-null   int64  \n",
            " 5   prevgrade      3630 non-null   float64\n",
            " 6   ownschshp      3630 non-null   int64  \n",
            " 7   prevqual       3630 non-null   int64  \n",
            " 8   displaced      3630 non-null   int64  \n",
            " 9   debtor         3630 non-null   int64  \n",
            " 10  paidfeetodate  3630 non-null   int64  \n",
            " 11  gender         3630 non-null   int64  \n",
            " 12  secsemgrade    3630 non-null   float64\n",
            " 13  target         3630 non-null   int64  \n",
            " 14  course         3630 non-null   int64  \n",
            "dtypes: float64(3), int64(12)\n",
            "memory usage: 425.5 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "```\n",
        "\n",
        "```\n",
        "\n",
        "**3. Train / Test the Model**\n",
        "If there is enough data, then 50-50 or 60-40 split is totally fine. There is no such thing as what would be better. It completely depends on the amount of data and the complexity of the model. If we train the model on enough data, the size of the test set is of no concern."
      ],
      "metadata": {
        "id": "Hz-PXf5U9-q7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "###OBJECTIVE: CREATE A TRAINING DATA SET AND A TESTING DATA SET, AND PRINT THE SAMPLE SIZES\n",
        "###\n",
        "\n",
        "#create a pandas dataframe with x and y; assign the entire dataframe to x and the target column (dependent variable) to y\n",
        "dropout_data = pd.read_csv(\"dropout_data.csv\")\n",
        "x = dropout_data\n",
        "y = dropout_data['target']"
      ],
      "metadata": {
        "id": "xv7LYuAr-O1R"
      },
      "execution_count": 176,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#split the data into training data and testing data using a train_size of 0.8 and a random_state of 19\n",
        "x_train, x_test, y_train, y_test = train_test_split(\n",
        "   x,\n",
        "   y,\n",
        "   train_size=0.8, #splits the data into two subsets with a ratio of 80:20 (training:testing)\n",
        "   random_state=19, #ensures reproducibility of the results\n",
        ")\n"
      ],
      "metadata": {
        "id": "pFxxr5Km8urU"
      },
      "execution_count": 177,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#print the sizes of the training and testing variables\n",
        "print(\"Size of Training Samples: {0} \\nSize of Testing Samples: {1}\".format(len(y_train), len(y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rcb9iA2x8xbs",
        "outputId": "39dda20d-8f1c-448d-9559-bf91b74e0120"
      },
      "execution_count": 178,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Size of Training Samples: 2904 \n",
            "Size of Testing Samples: 726\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "###OBJECTIVE: OBSERVE THE BALANCE OF THE TRAINING AND TESTING SAMPLES BY VARIABLE AND VARIABLE OUTCOME.\n",
        "###\n",
        "\n",
        "#read in your data and assign it to a variable (e.g., df)\n",
        "dropout_data = pd.read_csv('dropout_data.csv')\n"
      ],
      "metadata": {
        "id": "UXCmep9qhSam"
      },
      "execution_count": 179,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "#DROPOUT RATE: calculating the dropout rate to evenually see if our trained model predicts better than chance \n",
        "\n",
        "#number of dropouts versus the whole in the entire dataset \n",
        "target_ratio = (dropout_data['target'] ==0).sum() / len(dropout_data['target']) #correct \n",
        "print(target_ratio)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0x7Es_qvYNzM",
        "outputId": "25922f37-f710-4a7c-d31d-15c36be72aa6"
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.39146005509641874\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##TESTING DATA: checking for imbalances in the testing data by variable outcome\n",
        "#secsemgrade\n",
        "for i in range(0, 20, 5):  #grouped the continuous data by cohorts of 5 units to check the balance\n",
        "    print(\"Number of observations where 'secsemgrade' is between\", i, \"and\", i+5, \": \", ((x_test['secsemgrade'] >= i) & (x_test['secsemgrade'] < i+5)).sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iHDZudM598DT",
        "outputId": "0ad2d064-233e-4e0c-f72d-b7804bfd8aac"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of observations where 'secsemgrade' is between 0 and 5 :  160\n",
            "Number of observations where 'secsemgrade' is between 5 and 10 :  0\n",
            "Number of observations where 'secsemgrade' is between 10 and 15 :  530\n",
            "Number of observations where 'secsemgrade' is between 15 and 20 :  36\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ownschshp\n",
        "print(\"Number of observations for NO scholarship outcome in test data: \", (x_test['ownschshp'] == 0).sum())\n",
        "print(\"Number of observations for YES scholarship outcome in test data: \", (x_test['ownschshp'] == 1).sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FK3L4XHE976F",
        "outputId": "8b6e54ea-23a7-455e-a8f7-835fbbbcacd9"
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of observations for NO scholarship outcome in test data:  540\n",
            "Number of observations for YES scholarship outcome in test data:  186\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#gender\n",
        "print(\"Number of observations for FEMALE outcome in test data: \", (x_test['gender'] == 0).sum())\n",
        "print(\"Number of observations for MALE outcome in test data: \", (x_test['gender'] == 1).sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oZOk6Aak97uI",
        "outputId": "51b8dbd6-3971-466e-b985-bb532b4ab31b"
      },
      "execution_count": 183,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of observations for FEMALE outcome in test data:  477\n",
            "Number of observations for MALE outcome in test data:  249\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##TRAINING DATA: checking for imbalances in the training data BY variable outcome\n",
        "#secsemgrade\n",
        "for i in range(0, 20, 5):\n",
        "   print(\"Number of observations where 'secsemgrade' is between\", i, \"and\", i+5, \": \", ((x_train['secsemgrade'] >= i) & (x_train['secsemgrade'] < i+5)).sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "35LLQJWh97gF",
        "outputId": "df2f1611-3814-45f4-f8b9-5401aaf6e37c"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of observations where 'secsemgrade' is between 0 and 5 :  642\n",
            "Number of observations where 'secsemgrade' is between 5 and 10 :  0\n",
            "Number of observations where 'secsemgrade' is between 10 and 15 :  2093\n",
            "Number of observations where 'secsemgrade' is between 15 and 20 :  169\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ownschshp\n",
        "print(\"Number of observations for NO scholarship outcome in train data: \", (x_train['ownschshp'] == 0).sum())\n",
        "print(\"Number of observations for YES scholarship outcome in train data: \", (x_train['ownschshp'] == 1).sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eo31btbv_PsZ",
        "outputId": "484253e3-1098-41a0-b05e-a38e646f5253"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of observations for NO scholarship outcome in train data:  2121\n",
            "Number of observations for YES scholarship outcome in train data:  783\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#gender \n",
        "print(\"Number of observations for FEMALE outcome in train data: \", (x_train['gender'] == 0).sum())\n",
        "print(\"Number of observations for MALE outcome in train data: \", (x_train['gender'] == 1).sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "caBrAroR_Pet",
        "outputId": "2959b3d4-18e3-4519-fb47-12eef4b604fa"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of observations for FEMALE outcome in train data:  1904\n",
            "Number of observations for MALE outcome in train data:  1000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**4. Logistic Regresion**"
      ],
      "metadata": {
        "id": "ypM0858poTDW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "###OBJECTIVE: (1) CREATE A LOGISTIC MODEL BASED ON THE TRAINING SAMPLE AND (2) TRAIN THE MODEL\n",
        "###\n",
        "\n",
        "#fits a logistic regression model to the training sample\n",
        "\n",
        "var_struct = 'target ~ secsemgrade + ownschshp + gender' #creates a logit model object using the smf package\n",
        "trained_model = smf.logit(formula=var_struct, data=x_train) #performs logistic regression formula on the training data"
      ],
      "metadata": {
        "id": "Q407m0IYY96m"
      },
      "execution_count": 187,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#trains the logit model on the training data and returns an object called result\n",
        "result = trained_model.fit()\n",
        "print(result.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZX8Y2MIU_6YI",
        "outputId": "b48c0340-e167-4380-c457-5e7496d0eada"
      },
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimization terminated successfully.\n",
            "         Current function value: 0.427388\n",
            "         Iterations 7\n",
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:                 target   No. Observations:                 2904\n",
            "Model:                          Logit   Df Residuals:                     2900\n",
            "Method:                           MLE   Df Model:                            3\n",
            "Date:                Sat, 25 Feb 2023   Pseudo R-squ.:                  0.3624\n",
            "Time:                        02:12:41   Log-Likelihood:                -1241.1\n",
            "converged:                       True   LL-Null:                       -1946.6\n",
            "Covariance Type:            nonrobust   LLR p-value:                1.209e-305\n",
            "===============================================================================\n",
            "                  coef    std err          z      P>|z|      [0.025      0.975]\n",
            "-------------------------------------------------------------------------------\n",
            "Intercept      -2.7227      0.170    -15.982      0.000      -3.057      -2.389\n",
            "secsemgrade     0.2954      0.013     22.279      0.000       0.269       0.321\n",
            "ownschshp       1.5488      0.142     10.912      0.000       1.271       1.827\n",
            "gender         -0.6572      0.104     -6.328      0.000      -0.861      -0.454\n",
            "===============================================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#making predictions for train data (unknown data to the model)\n",
        "x_train[\"prob\"] = result.predict(x_train[['secsemgrade', 'ownschshp', 'gender']])"
      ],
      "metadata": {
        "id": "4kmOIzw9RwSZ"
      },
      "execution_count": 189,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plotting the probabilities for secsemgrade variable \n",
        "\n",
        "import seaborn as sns \n",
        "\n",
        "#create a boxplot using seaborn \n",
        "sns.boxplot(x='secsemgrade', y='prob', data=x_train)\n",
        "\n",
        "plt.title('Training Data')\n",
        "plt.xlabel('Second Semester Grade Average (0-20)')\n",
        "plt.ylabel('Probability of Dropping out (0) or Graduation (1)')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "lq6qyNGZRwBy",
        "outputId": "f466898a-e900-419c-d970-1bfa9be374b0"
      },
      "execution_count": 223,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#plotting the probabilities for ownschshp variable\n",
        "plt.scatter(x_train.ownschshp, y_train)\n",
        "plt.scatter(x_train.ownschshp, x_train[\"prob\"], color=\"red\")\n",
        "plt.title('Training Data')\n",
        "plt.xlabel(\"Scholarship Status (1=yes, 0=no)\")\n",
        "plt.ylabel(\"Probability of Dropping out (0) or Graduation (1)\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Qs6aAE0CRv2p",
        "outputId": "e351f88d-fc48-44be-9b6b-4dca8676ab58"
      },
      "execution_count": 192,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#plotting the probabilities for gender variable\n",
        "plt.scatter(x_train.gender, y_train)\n",
        "plt.scatter(x_train.gender, x_train[\"prob\"], color=\"red\")\n",
        "plt.title('Training Data')\n",
        "plt.xlabel(\"Gender (female=0, male=1)\")\n",
        "plt.ylabel(\"Probability of Dropping out (0) or Graduation (1)\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Vx6_yhwESVV5",
        "outputId": "8e216412-95f1-48d2-c879-c79c6373917f"
      },
      "execution_count": 219,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##ACCURACY BEFORE TESTING:\n",
        "#making predictions for train data \n",
        "x_train[\"prob\"] = result.predict(x_train[['secsemgrade', 'ownschshp', 'gender']])"
      ],
      "metadata": {
        "id": "DzNpttWo_6Jt"
      },
      "execution_count": 194,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prob > 0.5 means 1 (High Risk)\n",
        "# prob < 0.5 means 0 (Low Risk)\n",
        "x_train[\"prediction\"]=np.where(x_train[\"prob\"] > 0.5, 1, 0)\n",
        "x_train[:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "HFncL_HA_523",
        "outputId": "8bf7045e-3820-4684-c7f1-612811068ba7"
      },
      "execution_count": 195,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  moqual  faqual  admingrade  eduspecneeds  prevgrade  \\\n",
              "650          791       3       3       149.0             0      120.0   \n",
              "469          572      19       3       106.5             0      111.0   \n",
              "1472        1791       3       1       138.7             0      146.0   \n",
              "3103        3787      38      38       108.7             0      116.0   \n",
              "1262        1521      37      37       168.0             0      133.1   \n",
              "\n",
              "      ownschshp  prevqual  displaced  debtor  paidfeetodate  gender  \\\n",
              "650           0         1          0       0              0       1   \n",
              "469           0         1          1       0              1       1   \n",
              "1472          0         1          0       0              1       1   \n",
              "3103          0         1          1       0              1       1   \n",
              "1262          0         1          0       0              1       1   \n",
              "\n",
              "      secsemgrade  target  course      prob  prediction  \n",
              "650           0.0       0    9500  0.032930           0  \n",
              "469          10.8       0    9119  0.452829           0  \n",
              "1472          0.0       0    9147  0.032930           0  \n",
              "3103          0.0       0    9238  0.032930           0  \n",
              "1262         15.2       1    9991  0.752250           1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f2389f6b-eb9e-42fd-8ed5-50f9f7ff5e4e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>moqual</th>\n",
              "      <th>faqual</th>\n",
              "      <th>admingrade</th>\n",
              "      <th>eduspecneeds</th>\n",
              "      <th>prevgrade</th>\n",
              "      <th>ownschshp</th>\n",
              "      <th>prevqual</th>\n",
              "      <th>displaced</th>\n",
              "      <th>debtor</th>\n",
              "      <th>paidfeetodate</th>\n",
              "      <th>gender</th>\n",
              "      <th>secsemgrade</th>\n",
              "      <th>target</th>\n",
              "      <th>course</th>\n",
              "      <th>prob</th>\n",
              "      <th>prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>650</th>\n",
              "      <td>791</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>149.0</td>\n",
              "      <td>0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.032930</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>469</th>\n",
              "      <td>572</td>\n",
              "      <td>19</td>\n",
              "      <td>3</td>\n",
              "      <td>106.5</td>\n",
              "      <td>0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.8</td>\n",
              "      <td>0</td>\n",
              "      <td>9119</td>\n",
              "      <td>0.452829</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1472</th>\n",
              "      <td>1791</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>138.7</td>\n",
              "      <td>0</td>\n",
              "      <td>146.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9147</td>\n",
              "      <td>0.032930</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3103</th>\n",
              "      <td>3787</td>\n",
              "      <td>38</td>\n",
              "      <td>38</td>\n",
              "      <td>108.7</td>\n",
              "      <td>0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9238</td>\n",
              "      <td>0.032930</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1262</th>\n",
              "      <td>1521</td>\n",
              "      <td>37</td>\n",
              "      <td>37</td>\n",
              "      <td>168.0</td>\n",
              "      <td>0</td>\n",
              "      <td>133.1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>15.2</td>\n",
              "      <td>1</td>\n",
              "      <td>9991</td>\n",
              "      <td>0.752250</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2389f6b-eb9e-42fd-8ed5-50f9f7ff5e4e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f2389f6b-eb9e-42fd-8ed5-50f9f7ff5e4e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f2389f6b-eb9e-42fd-8ed5-50f9f7ff5e4e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#comparing the predictions (newly added col) with actual (x_test)\n",
        "#pred2true => 1 if they are same and 0 if different\n",
        "x_train[\"pred2true\"]= np.where(x_train[\"prediction\"] == x_train[\"target\"], 1, 0)\n",
        "x_train[:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "QswcJTgJALKE",
        "outputId": "78b0deac-36d6-4183-9ee3-ac6478a4ccef"
      },
      "execution_count": 196,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  moqual  faqual  admingrade  eduspecneeds  prevgrade  \\\n",
              "650          791       3       3       149.0             0      120.0   \n",
              "469          572      19       3       106.5             0      111.0   \n",
              "1472        1791       3       1       138.7             0      146.0   \n",
              "3103        3787      38      38       108.7             0      116.0   \n",
              "1262        1521      37      37       168.0             0      133.1   \n",
              "\n",
              "      ownschshp  prevqual  displaced  debtor  paidfeetodate  gender  \\\n",
              "650           0         1          0       0              0       1   \n",
              "469           0         1          1       0              1       1   \n",
              "1472          0         1          0       0              1       1   \n",
              "3103          0         1          1       0              1       1   \n",
              "1262          0         1          0       0              1       1   \n",
              "\n",
              "      secsemgrade  target  course      prob  prediction  pred2true  \n",
              "650           0.0       0    9500  0.032930           0          1  \n",
              "469          10.8       0    9119  0.452829           0          1  \n",
              "1472          0.0       0    9147  0.032930           0          1  \n",
              "3103          0.0       0    9238  0.032930           0          1  \n",
              "1262         15.2       1    9991  0.752250           1          1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-671341d4-5c7c-4ddd-8e7e-d0b465fcdf42\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>moqual</th>\n",
              "      <th>faqual</th>\n",
              "      <th>admingrade</th>\n",
              "      <th>eduspecneeds</th>\n",
              "      <th>prevgrade</th>\n",
              "      <th>ownschshp</th>\n",
              "      <th>prevqual</th>\n",
              "      <th>displaced</th>\n",
              "      <th>debtor</th>\n",
              "      <th>paidfeetodate</th>\n",
              "      <th>gender</th>\n",
              "      <th>secsemgrade</th>\n",
              "      <th>target</th>\n",
              "      <th>course</th>\n",
              "      <th>prob</th>\n",
              "      <th>prediction</th>\n",
              "      <th>pred2true</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>650</th>\n",
              "      <td>791</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>149.0</td>\n",
              "      <td>0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.032930</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>469</th>\n",
              "      <td>572</td>\n",
              "      <td>19</td>\n",
              "      <td>3</td>\n",
              "      <td>106.5</td>\n",
              "      <td>0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.8</td>\n",
              "      <td>0</td>\n",
              "      <td>9119</td>\n",
              "      <td>0.452829</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1472</th>\n",
              "      <td>1791</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>138.7</td>\n",
              "      <td>0</td>\n",
              "      <td>146.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9147</td>\n",
              "      <td>0.032930</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3103</th>\n",
              "      <td>3787</td>\n",
              "      <td>38</td>\n",
              "      <td>38</td>\n",
              "      <td>108.7</td>\n",
              "      <td>0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9238</td>\n",
              "      <td>0.032930</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1262</th>\n",
              "      <td>1521</td>\n",
              "      <td>37</td>\n",
              "      <td>37</td>\n",
              "      <td>168.0</td>\n",
              "      <td>0</td>\n",
              "      <td>133.1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>15.2</td>\n",
              "      <td>1</td>\n",
              "      <td>9991</td>\n",
              "      <td>0.752250</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-671341d4-5c7c-4ddd-8e7e-d0b465fcdf42')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-671341d4-5c7c-4ddd-8e7e-d0b465fcdf42 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-671341d4-5c7c-4ddd-8e7e-d0b465fcdf42');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"True Prediction: \", len(x_train.query(\"pred2true == 1\")))\n",
        "print(\"False Prediction: \", len(x_train.query(\"pred2true == 0\")))\n",
        "print(\"Prediction Accuracy: \", len(x_train.query(\"pred2true == 1\"))/len(y_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g79RkDxhAQ_H",
        "outputId": "e2ee716d-eadb-458d-ea53-68f8b2121930"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True Prediction:  2364\n",
            "False Prediction:  540\n",
            "Prediction Accuracy:  0.8140495867768595\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#alternative way to calculate accuracy \n",
        "\n",
        "accuracy_score(x_train['target'], x_train['prediction'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "198mDFfHATye",
        "outputId": "25c49d7d-7b47-46a1-f635-77c43dd83eb0"
      },
      "execution_count": 198,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8140495867768595"
            ]
          },
          "metadata": {},
          "execution_count": 198
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#see x_train \n",
        "x_train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "uv0L_EXveSOe",
        "outputId": "f6a676be-27fc-45f7-b557-9ce2d88765b1"
      },
      "execution_count": 199,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  moqual  faqual  admingrade  eduspecneeds  prevgrade  \\\n",
              "650          791       3       3       149.0             0      120.0   \n",
              "469          572      19       3       106.5             0      111.0   \n",
              "1472        1791       3       1       138.7             0      146.0   \n",
              "3103        3787      38      38       108.7             0      116.0   \n",
              "1262        1521      37      37       168.0             0      133.1   \n",
              "\n",
              "      ownschshp  prevqual  displaced  debtor  paidfeetodate  gender  \\\n",
              "650           0         1          0       0              0       1   \n",
              "469           0         1          1       0              1       1   \n",
              "1472          0         1          0       0              1       1   \n",
              "3103          0         1          1       0              1       1   \n",
              "1262          0         1          0       0              1       1   \n",
              "\n",
              "      secsemgrade  target  course      prob  prediction  pred2true  \n",
              "650           0.0       0    9500  0.032930           0          1  \n",
              "469          10.8       0    9119  0.452829           0          1  \n",
              "1472          0.0       0    9147  0.032930           0          1  \n",
              "3103          0.0       0    9238  0.032930           0          1  \n",
              "1262         15.2       1    9991  0.752250           1          1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-247d35fd-2742-473d-8e06-525808ff981b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>moqual</th>\n",
              "      <th>faqual</th>\n",
              "      <th>admingrade</th>\n",
              "      <th>eduspecneeds</th>\n",
              "      <th>prevgrade</th>\n",
              "      <th>ownschshp</th>\n",
              "      <th>prevqual</th>\n",
              "      <th>displaced</th>\n",
              "      <th>debtor</th>\n",
              "      <th>paidfeetodate</th>\n",
              "      <th>gender</th>\n",
              "      <th>secsemgrade</th>\n",
              "      <th>target</th>\n",
              "      <th>course</th>\n",
              "      <th>prob</th>\n",
              "      <th>prediction</th>\n",
              "      <th>pred2true</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>650</th>\n",
              "      <td>791</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>149.0</td>\n",
              "      <td>0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.032930</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>469</th>\n",
              "      <td>572</td>\n",
              "      <td>19</td>\n",
              "      <td>3</td>\n",
              "      <td>106.5</td>\n",
              "      <td>0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10.8</td>\n",
              "      <td>0</td>\n",
              "      <td>9119</td>\n",
              "      <td>0.452829</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1472</th>\n",
              "      <td>1791</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>138.7</td>\n",
              "      <td>0</td>\n",
              "      <td>146.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9147</td>\n",
              "      <td>0.032930</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3103</th>\n",
              "      <td>3787</td>\n",
              "      <td>38</td>\n",
              "      <td>38</td>\n",
              "      <td>108.7</td>\n",
              "      <td>0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9238</td>\n",
              "      <td>0.032930</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1262</th>\n",
              "      <td>1521</td>\n",
              "      <td>37</td>\n",
              "      <td>37</td>\n",
              "      <td>168.0</td>\n",
              "      <td>0</td>\n",
              "      <td>133.1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>15.2</td>\n",
              "      <td>1</td>\n",
              "      <td>9991</td>\n",
              "      <td>0.752250</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-247d35fd-2742-473d-8e06-525808ff981b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-247d35fd-2742-473d-8e06-525808ff981b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-247d35fd-2742-473d-8e06-525808ff981b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 199
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#calculate train specificity \n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Compute confusion matrix\n",
        "tn, fp, fn, tp = confusion_matrix(x_train[\"target\"], x_train[\"prediction\"]).ravel()\n",
        "\n",
        "# Calculate specificity\n",
        "specificity = tn / (tn + fp)\n",
        "\n",
        "print(\"Specificity:\", specificity)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nTpTLB1ZND5h",
        "outputId": "5990de8e-25e1-45db-df05-18110a38d70b"
      },
      "execution_count": 200,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Specificity: 0.5966754155730534\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#compute train confusion matrix\n",
        "tn, fp, fn, tp = confusion_matrix(x_train[\"target\"], x_train[\"prediction\"]).ravel()\n",
        "\n",
        "#calculate train sensitivity\n",
        "sensitivity = tp / (tp + fn)\n",
        "\n",
        "print(\"Sensitivity:\", sensitivity)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jNSk3EzjPibw",
        "outputId": "548eeb4f-a2ac-4d9e-b80b-59e7a29c9bb0"
      },
      "execution_count": 201,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sensitivity: 0.9551391254968767\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**5. Evaluate the Performance of the Trained Model on the Testing Set**"
      ],
      "metadata": {
        "id": "Du-NAijdjsww"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "###OBJECTIVE: (1) \"TEST\" THE TRAINED LOGISTIC MODEL BASED ON THE TESTING SAMPLE AND (2) EVALUATE THE MODEL'S PERFORMANCE\n",
        "###\n",
        "\n",
        "# Making Predictions for test data (unknown data to the model)\n",
        "x_test[\"prob\"] = result.predict(x_test[['secsemgrade', 'ownschshp', 'gender']])"
      ],
      "metadata": {
        "id": "h-vU6Xw5jrOn"
      },
      "execution_count": 202,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plotting the probabilities for secsemgrade variable \n",
        "\n",
        "import seaborn as sns \n",
        "\n",
        "#create a boxplot using seaborn \n",
        "sns.boxplot(x='secsemgrade', y='prob', data=x_test)\n",
        "\n",
        "plt.title('Testing Data')\n",
        "plt.xlabel('Second Semester Grade Average (0-20)')\n",
        "plt.ylabel('Probability of Dropping out (0) or Graduation (1)')\n",
        "\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "u7FvEoYWBCzS",
        "outputId": "5e7d61da-1fca-4045-a219-8804225403f2"
      },
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#plotting the probabilities for ownschshp variable \n",
        "plt.scatter(x_test.ownschshp, y_test)\n",
        "plt.scatter(x_test.ownschshp, x_test[\"prob\"], color=\"red\")\n",
        "plt.title('Testing Data')\n",
        "plt.xlabel(\"Scholarship Status (no=0, yes=1)\")\n",
        "plt.ylabel(\"Probability of Dropping out (0) or Graduation (1)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "xEffDFrfBCqt",
        "outputId": "b75f8029-f457-4295-e0ac-904f76980e07"
      },
      "execution_count": 221,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#plotting the probabilities for gender \n",
        "plt.scatter(x_test.gender, y_test)\n",
        "plt.scatter(x_test.gender, x_test[\"prob\"], color=\"red\")\n",
        "plt.title('Testing Data')\n",
        "plt.xlabel(\"Gender (female=0, male=1)\")\n",
        "plt.ylabel(\"'Probability of Dropping out (0) or Graduation (1)\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "OO0CLsTIBCig",
        "outputId": "5c095f15-42fb-4c77-fea8-bcf99175fb11"
      },
      "execution_count": 222,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##ACCURACY AFTER TESTING\n",
        "\n",
        "\n",
        "#making predictions for test data (unknown data to the model)\n",
        "x_test[\"prob\"] = result.predict(x_test[['secsemgrade', 'ownschshp', 'gender']])\n"
      ],
      "metadata": {
        "id": "T4E4FO16BCY0"
      },
      "execution_count": 206,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prob > 0.5 means 1 (High Risk)\n",
        "# prob < 0.5 means 0 (Low Risk)\n",
        "x_test[\"prediction\"]=np.where(x_test[\"prob\"] > 0.5, 1, 0)\n",
        "x_test[:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "S_minovNCsEm",
        "outputId": "37d9a4b7-353a-4e1a-8ec1-72b72a662af2"
      },
      "execution_count": 207,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  moqual  faqual  admingrade  eduspecneeds  prevgrade  \\\n",
              "2262        2763       9       9       130.0             0      133.1   \n",
              "135          168       2       2       130.0             0      130.0   \n",
              "894         1074      37      37       135.9             0      132.0   \n",
              "1546        1879      19       3       138.8             0      157.0   \n",
              "2263        2765       1       1       127.5             0      145.0   \n",
              "\n",
              "      ownschshp  prevqual  displaced  debtor  paidfeetodate  gender  \\\n",
              "2262          0         3          0       0              1       0   \n",
              "135           0         3          0       0              1       0   \n",
              "894           0         1          0       0              1       0   \n",
              "1546          0         1          0       0              1       1   \n",
              "2263          0         1          1       0              1       0   \n",
              "\n",
              "      secsemgrade  target  course      prob  prediction  \n",
              "2262    13.285714       1    8014  0.768935           1  \n",
              "135     14.257143       1    9500  0.815973           1  \n",
              "894     13.000000       1    9238  0.753599           1  \n",
              "1546    13.557143       1    9500  0.651422           1  \n",
              "2263    13.110000       1    9500  0.759584           1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ce2c4093-a1e6-4b7a-bb95-c935ad64d4c6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>moqual</th>\n",
              "      <th>faqual</th>\n",
              "      <th>admingrade</th>\n",
              "      <th>eduspecneeds</th>\n",
              "      <th>prevgrade</th>\n",
              "      <th>ownschshp</th>\n",
              "      <th>prevqual</th>\n",
              "      <th>displaced</th>\n",
              "      <th>debtor</th>\n",
              "      <th>paidfeetodate</th>\n",
              "      <th>gender</th>\n",
              "      <th>secsemgrade</th>\n",
              "      <th>target</th>\n",
              "      <th>course</th>\n",
              "      <th>prob</th>\n",
              "      <th>prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2262</th>\n",
              "      <td>2763</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>130.0</td>\n",
              "      <td>0</td>\n",
              "      <td>133.1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.285714</td>\n",
              "      <td>1</td>\n",
              "      <td>8014</td>\n",
              "      <td>0.768935</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135</th>\n",
              "      <td>168</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>130.0</td>\n",
              "      <td>0</td>\n",
              "      <td>130.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>14.257143</td>\n",
              "      <td>1</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.815973</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>894</th>\n",
              "      <td>1074</td>\n",
              "      <td>37</td>\n",
              "      <td>37</td>\n",
              "      <td>135.9</td>\n",
              "      <td>0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>9238</td>\n",
              "      <td>0.753599</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1546</th>\n",
              "      <td>1879</td>\n",
              "      <td>19</td>\n",
              "      <td>3</td>\n",
              "      <td>138.8</td>\n",
              "      <td>0</td>\n",
              "      <td>157.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13.557143</td>\n",
              "      <td>1</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.651422</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2263</th>\n",
              "      <td>2765</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>127.5</td>\n",
              "      <td>0</td>\n",
              "      <td>145.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.110000</td>\n",
              "      <td>1</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.759584</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ce2c4093-a1e6-4b7a-bb95-c935ad64d4c6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ce2c4093-a1e6-4b7a-bb95-c935ad64d4c6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ce2c4093-a1e6-4b7a-bb95-c935ad64d4c6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#comparing the predictions (newly added col) with actual (x_test)\n",
        "#pred2true => 1 if they are same and 0 if different\n",
        "x_test[\"pred2true\"]= np.where(x_test[\"prediction\"] == x_test[\"target\"], 1, 0)\n",
        "x_test[:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "9LCNvjFgCr9o",
        "outputId": "dff28d58-d2d5-4272-c086-0787a7dcfa17"
      },
      "execution_count": 208,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  moqual  faqual  admingrade  eduspecneeds  prevgrade  \\\n",
              "2262        2763       9       9       130.0             0      133.1   \n",
              "135          168       2       2       130.0             0      130.0   \n",
              "894         1074      37      37       135.9             0      132.0   \n",
              "1546        1879      19       3       138.8             0      157.0   \n",
              "2263        2765       1       1       127.5             0      145.0   \n",
              "\n",
              "      ownschshp  prevqual  displaced  debtor  paidfeetodate  gender  \\\n",
              "2262          0         3          0       0              1       0   \n",
              "135           0         3          0       0              1       0   \n",
              "894           0         1          0       0              1       0   \n",
              "1546          0         1          0       0              1       1   \n",
              "2263          0         1          1       0              1       0   \n",
              "\n",
              "      secsemgrade  target  course      prob  prediction  pred2true  \n",
              "2262    13.285714       1    8014  0.768935           1          1  \n",
              "135     14.257143       1    9500  0.815973           1          1  \n",
              "894     13.000000       1    9238  0.753599           1          1  \n",
              "1546    13.557143       1    9500  0.651422           1          1  \n",
              "2263    13.110000       1    9500  0.759584           1          1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e65607ec-4bed-4aed-a81c-4e7db7b51e57\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>moqual</th>\n",
              "      <th>faqual</th>\n",
              "      <th>admingrade</th>\n",
              "      <th>eduspecneeds</th>\n",
              "      <th>prevgrade</th>\n",
              "      <th>ownschshp</th>\n",
              "      <th>prevqual</th>\n",
              "      <th>displaced</th>\n",
              "      <th>debtor</th>\n",
              "      <th>paidfeetodate</th>\n",
              "      <th>gender</th>\n",
              "      <th>secsemgrade</th>\n",
              "      <th>target</th>\n",
              "      <th>course</th>\n",
              "      <th>prob</th>\n",
              "      <th>prediction</th>\n",
              "      <th>pred2true</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2262</th>\n",
              "      <td>2763</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>130.0</td>\n",
              "      <td>0</td>\n",
              "      <td>133.1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.285714</td>\n",
              "      <td>1</td>\n",
              "      <td>8014</td>\n",
              "      <td>0.768935</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135</th>\n",
              "      <td>168</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>130.0</td>\n",
              "      <td>0</td>\n",
              "      <td>130.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>14.257143</td>\n",
              "      <td>1</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.815973</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>894</th>\n",
              "      <td>1074</td>\n",
              "      <td>37</td>\n",
              "      <td>37</td>\n",
              "      <td>135.9</td>\n",
              "      <td>0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>9238</td>\n",
              "      <td>0.753599</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1546</th>\n",
              "      <td>1879</td>\n",
              "      <td>19</td>\n",
              "      <td>3</td>\n",
              "      <td>138.8</td>\n",
              "      <td>0</td>\n",
              "      <td>157.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13.557143</td>\n",
              "      <td>1</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.651422</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2263</th>\n",
              "      <td>2765</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>127.5</td>\n",
              "      <td>0</td>\n",
              "      <td>145.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.110000</td>\n",
              "      <td>1</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.759584</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e65607ec-4bed-4aed-a81c-4e7db7b51e57')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e65607ec-4bed-4aed-a81c-4e7db7b51e57 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e65607ec-4bed-4aed-a81c-4e7db7b51e57');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 208
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"True Prediction: \", len(x_test.query(\"pred2true == 1\")))\n",
        "print(\"False Prediction: \", len(x_test.query(\"pred2true == 0\")))\n",
        "print(\"Prediction Accuracy: \", len(x_test.query(\"pred2true == 1\"))/len(y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f7z3wlCICr1U",
        "outputId": "c7c9d858-7b66-4900-b671-03d89fe19d22"
      },
      "execution_count": 209,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True Prediction:  581\n",
            "False Prediction:  145\n",
            "Prediction Accuracy:  0.800275482093664\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#show the new column \n",
        "x_test.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "MqzNz5S0dk4a",
        "outputId": "aa0a0660-7ad4-4132-dc5d-b37514e0ce9e"
      },
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  moqual  faqual  admingrade  eduspecneeds  prevgrade  \\\n",
              "2262        2763       9       9       130.0             0      133.1   \n",
              "135          168       2       2       130.0             0      130.0   \n",
              "894         1074      37      37       135.9             0      132.0   \n",
              "1546        1879      19       3       138.8             0      157.0   \n",
              "2263        2765       1       1       127.5             0      145.0   \n",
              "\n",
              "      ownschshp  prevqual  displaced  debtor  paidfeetodate  gender  \\\n",
              "2262          0         3          0       0              1       0   \n",
              "135           0         3          0       0              1       0   \n",
              "894           0         1          0       0              1       0   \n",
              "1546          0         1          0       0              1       1   \n",
              "2263          0         1          1       0              1       0   \n",
              "\n",
              "      secsemgrade  target  course      prob  prediction  pred2true  \n",
              "2262    13.285714       1    8014  0.768935           1          1  \n",
              "135     14.257143       1    9500  0.815973           1          1  \n",
              "894     13.000000       1    9238  0.753599           1          1  \n",
              "1546    13.557143       1    9500  0.651422           1          1  \n",
              "2263    13.110000       1    9500  0.759584           1          1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4602eeba-2887-4366-8d5c-43b9668a883a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>moqual</th>\n",
              "      <th>faqual</th>\n",
              "      <th>admingrade</th>\n",
              "      <th>eduspecneeds</th>\n",
              "      <th>prevgrade</th>\n",
              "      <th>ownschshp</th>\n",
              "      <th>prevqual</th>\n",
              "      <th>displaced</th>\n",
              "      <th>debtor</th>\n",
              "      <th>paidfeetodate</th>\n",
              "      <th>gender</th>\n",
              "      <th>secsemgrade</th>\n",
              "      <th>target</th>\n",
              "      <th>course</th>\n",
              "      <th>prob</th>\n",
              "      <th>prediction</th>\n",
              "      <th>pred2true</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2262</th>\n",
              "      <td>2763</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>130.0</td>\n",
              "      <td>0</td>\n",
              "      <td>133.1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.285714</td>\n",
              "      <td>1</td>\n",
              "      <td>8014</td>\n",
              "      <td>0.768935</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135</th>\n",
              "      <td>168</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>130.0</td>\n",
              "      <td>0</td>\n",
              "      <td>130.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>14.257143</td>\n",
              "      <td>1</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.815973</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>894</th>\n",
              "      <td>1074</td>\n",
              "      <td>37</td>\n",
              "      <td>37</td>\n",
              "      <td>135.9</td>\n",
              "      <td>0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>9238</td>\n",
              "      <td>0.753599</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1546</th>\n",
              "      <td>1879</td>\n",
              "      <td>19</td>\n",
              "      <td>3</td>\n",
              "      <td>138.8</td>\n",
              "      <td>0</td>\n",
              "      <td>157.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13.557143</td>\n",
              "      <td>1</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.651422</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2263</th>\n",
              "      <td>2765</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>127.5</td>\n",
              "      <td>0</td>\n",
              "      <td>145.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.110000</td>\n",
              "      <td>1</td>\n",
              "      <td>9500</td>\n",
              "      <td>0.759584</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4602eeba-2887-4366-8d5c-43b9668a883a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4602eeba-2887-4366-8d5c-43b9668a883a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4602eeba-2887-4366-8d5c-43b9668a883a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 210
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#alternative way to calculate accuracy\n",
        "accuracy_score(x_test['target'], x_test['prediction'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nY2sZt1ZbnHQ",
        "outputId": "4424a29c-bdd0-4d69-9e7f-f57425a75d97"
      },
      "execution_count": 211,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.800275482093664"
            ]
          },
          "metadata": {},
          "execution_count": 211
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing out the trained model's results again \n",
        "print(result.summary()) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j17fHV3qa26h",
        "outputId": "19776d2b-bbfe-4040-80a1-d1976fee9d13"
      },
      "execution_count": 212,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:                 target   No. Observations:                 2904\n",
            "Model:                          Logit   Df Residuals:                     2900\n",
            "Method:                           MLE   Df Model:                            3\n",
            "Date:                Sat, 25 Feb 2023   Pseudo R-squ.:                  0.3624\n",
            "Time:                        02:13:01   Log-Likelihood:                -1241.1\n",
            "converged:                       True   LL-Null:                       -1946.6\n",
            "Covariance Type:            nonrobust   LLR p-value:                1.209e-305\n",
            "===============================================================================\n",
            "                  coef    std err          z      P>|z|      [0.025      0.975]\n",
            "-------------------------------------------------------------------------------\n",
            "Intercept      -2.7227      0.170    -15.982      0.000      -3.057      -2.389\n",
            "secsemgrade     0.2954      0.013     22.279      0.000       0.269       0.321\n",
            "ownschshp       1.5488      0.142     10.912      0.000       1.271       1.827\n",
            "gender         -0.6572      0.104     -6.328      0.000      -0.861      -0.454\n",
            "===============================================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***6. Interpreting Results *** Because of the underlining idea behind logistic regression, the result is interpreted in log odds, which actually does not make meaningful interpretation. One way to make a meaningful interpretation of the result is to convert it to *'odds ratio'*. To do this, we look for the exponents of the coefficients. "
      ],
      "metadata": {
        "id": "A8S3S593i-aH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# We look for the exponential value of the coefficients/parameters using exp function in the numpy library\n",
        "np.exp(result.params)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z66YBasLYCp-",
        "outputId": "cde61f53-7010-46bb-900c-f10bdff67d95"
      },
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Intercept      0.065697\n",
              "secsemgrade    1.343705\n",
              "ownschshp      4.705673\n",
              "gender         0.518299\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 213
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#confusion matrix for testing data\n",
        "from sklearn import metrics\n",
        "import matplotlib.pyplot as plt\n",
        "confusion_matrix = metrics.confusion_matrix(x_test[\"target\"], x_test[\"prediction\"])\n",
        "\n",
        "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [False, True])\n",
        "cm_display.plot()\n",
        "plt.title(\"Testing Data\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "zHxThF_PIBu_",
        "outputId": "a3f0568c-71a9-40a2-d6e3-c245c38b4435"
      },
      "execution_count": 214,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#confusion matrix for training data\n",
        "from sklearn import metrics\n",
        "import matplotlib.pyplot as plt\n",
        "confusion_matrix = metrics.confusion_matrix(x_train[\"target\"], x_train[\"prediction\"])\n",
        "\n",
        "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [False, True])\n",
        "cm_display.plot()\n",
        "plt.title(\"Training Data\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "E0KGEqwjVydJ",
        "outputId": "82ff9729-6a43-440c-9546-01081c3e366c"
      },
      "execution_count": 215,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#test specificity\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Compute confusion matrix\n",
        "tn, fp, fn, tp = confusion_matrix(x_test[\"target\"], x_test[\"prediction\"]).ravel()\n",
        "\n",
        "# Calculate specificity\n",
        "specificity = tn / (tn + fp)\n",
        "\n",
        "print(\"Specificity:\", specificity)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AVqJe1b-MKCg",
        "outputId": "c739e492-9838-4286-a5fa-516d46e705fe"
      },
      "execution_count": 216,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Specificity: 0.579136690647482\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "#compute test confusion matrix\n",
        "tn, fp, fn, tp = confusion_matrix(x_test[\"target\"], x_test[\"prediction\"]).ravel()\n",
        "\n",
        "#calculate test sensitivity\n",
        "sensitivity = tp / (tp + fn)\n",
        "\n",
        "print(\"Sensitivity:\", sensitivity)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WLd8C9nyPNH2",
        "outputId": "091ee7d3-fd50-48ac-fe0e-efd87b6077ad"
      },
      "execution_count": 217,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sensitivity: 0.9375\n"
          ]
        }
      ]
    }
  ]
}
